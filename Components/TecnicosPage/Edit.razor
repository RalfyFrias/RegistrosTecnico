@page "/Tecnico/Edit"
@page "/Tecnico/Edit/{TecnicoId:int}"
@inject TecnicoService tecnicoService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<EditForm Model="tecnico" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0" style="background-color: white">

        <div class="card-header bg-primary text-center text-white py-2 rounded">
            <h3 style="font-weight: bold;" class="font-weight-bold">Editar T&eacute;cnico</h3>
        </div>

        <div class="card-body">
            <div class="col-md-10 mb-3">
                <label for="TecnicoId" class="form-label">T&eacute;cnicoId:</label>
                <InputNumber @bind-Value="tecnico.TecnicoId" class="form-control" />
                <ValidationMessage For="@(() => tecnico.TecnicoId)" />
            </div>

            <div class="mb-3">
                <label for="TipoId" class="form-label">Tipo Técnico:</label>
                <InputSelect @bind-Value="tecnico.TipoId" class="form-control">
                    <option value="0">Elija un tipo t&eacute;cnico</option>
                    @foreach (var tipo in listaTiposTecnicos)
                    {
                        <option value="@tipo.TipoId ">@tipo.Descripcion</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => tecnico.TecnicoId)" />
            </div>

            <div class="mb-3">
                <label for="Nombres" class="form-label">Nombre:</label>
                <InputText @bind-Value="tecnico.Nombre" class="form-control" />
                <ValidationMessage For="@(() => tecnico.Nombre)" />
            </div>

            <div class="mb-3">
                <label for="SueldoHora" class="form-label">Sueldo por Hora:</label>
                <InputNumber @bind-Value="tecnico.Sueldohora" class="form-control" />
                <ValidationMessage For="@(() => tecnico.Sueldohora)" />
            </div>
        </div>

        <div class="card-footer d-flex justify-content-lg-center text-center">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">
                    <span class="bi bi-plus"></span> Nuevo
                </button>
                <button type="submit" class="btn btn-outline-success">
                    <span class="bi bi-check2-square"></span> Guardar
                </button>
                <button type="button" class="btn btn-outline-danger" @onclick="Retroceder">
                    <span class="bi bi-arrow-90deg-left"></span> Volver
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int TecnicoId { get; set; }
    public Tecnicos? tecnico { get; set; } = new Tecnicos();
    public List<Tipostecnicos> listaTiposTecnicos { get; set; } = new List<Tipostecnicos>();
    private bool Existe = false;

    protected override async Task OnInitializedAsync()
    {
      
        if (TecnicoId != 0)
        {
            tecnico = await tecnicoService.Buscar(TecnicoId);
          
        }
    }

    public async Task Nuevo()
    {
        tecnico = new Tecnicos();
        Existe = false;
    }

    public async Task Buscar()
    {
        Existe = false;
        var tecnicoEncontrado = await tecnicoService.Buscar(TecnicoId);

        if (tecnicoEncontrado!= null)
        {
            tecnico = tecnicoEncontrado;
        }
        else
        {
            Nuevo();
        }
    }
    public async Task Guardar()
    {
        if (await Validar())
        {
            return;
        }

        var guardo = await tecnicoService.Guardar(tecnico);
        if (guardo)
        {
            Nuevo();
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await tecnicoService.Eliminar(tecnico.TecnicoId);
        Nuevo();
    }

    private async Task Retroceder()
    {
        navigationManager.NavigateTo("/Tecnico/Index");
    }

    public async Task<bool> Validar()
    {
        var listaTecnicos = await tecnicoService.Listar(t => t.Nombre.ToLower() == tecnico.Nombre.ToLower() && t.TecnicoId != tecnico.TecnicoId);
        Existe = listaTecnicos.Any();
        return Existe;
    }
}