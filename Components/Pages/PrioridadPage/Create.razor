@page "/Prioridad/Create"
@inject NavigationManager navigationManager
@inject PrioridadService prioridadService
@rendermode InteractiveServer

<PageTitle>Registro de Prioridades</PageTitle>

<EditForm Model="Prioridad" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header bg-primary text-white text-center py-2 rounded">
            <h3><i class="fas fa-clipboard-list"></i> Registro de Prioridad</h3>
        </div>
        <div class="card-body">
            <!-- PrioridadId -->
            <div class="form-group">
                <label for="PrioridadId">PrioridadId</label>
                <InputNumber id="PrioridadId" class="form-control" @bind-Value="Prioridad.PrioridadId" />
                <ValidationMessage For="@(() => Prioridad.PrioridadId)" />
            </div>

            <!-- Descripcion -->
            <div class="form-group">
                <label for="Descripcion">Descripción</label>
                <InputText id="Descripcion" class="form-control" @bind-Value="Prioridad.Descripcion" />
                <ValidationMessage For="@(() => Prioridad.Descripcion)" />
            </div>

            <!-- Tiempo -->
            <div class="form-group">
                <label for="Tiempo">Tiempo</label>
                <InputText id="Descripcion" class="form-control" @bind-Value="Prioridad.Tiempo" />
                <ValidationMessage For="@(() => Prioridad.Tiempo)" />
            </div>

            <!-- Botones -->
            <div class="text-center">
                <button type="submit" class="btn btn-outline-success ml-2">
                    <span class="bi bi-check-circle-fill"></span> Guardar
                </button>

                <NavLink href="/Prioridades/index" class="btn btn-outline-danger mx-2">
                    <span class="bi bi-arrow-bar-left"></span> Retroceder
                </NavLink>
            </div>
        </div>
        @mensaje
    </div>
</EditForm>

@code {
    private Prioridades? Prioridad { get; set; } = new Prioridades();
    public bool Existe = false;
    public string mensaje;

    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }
        var guardo = await prioridadService.Guardar(Prioridad);
        if (guardo)
        {
            Nuevo();
            navigationManager.NavigateTo("/Prioridades/Index");
        }
    }

    public async Task Nuevo()
    {
        Prioridad = new Prioridades();
    }

    public async Task<bool> Validar()
    {
        Existe = await prioridadService.Existe(Prioridad.PrioridadId);
        return !Existe;
    }
}
