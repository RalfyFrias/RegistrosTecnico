@page "/Cliente/Create"
@inject ClienteService clienteService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<EditForm Model="clientes" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0" style="background-color: white">

        <div class="card-header bg-primary text-center text-white py-2 rounded">
            <h3 style="font-weight: bold;" class="font-weight-bold">Registro de clientes</h3>
        </div>

        <div class="card-body">
            <div class="col-md-10 mb-3">
                <label for="ClienteId" class="form-label">ClienteId:</label>
                <InputNumber @bind-Value="clientes.ClienteId" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="Nombres" class="form-label">Nombres:</label>
                <InputText @bind-Value="clientes.Nombres" class="form-control" />
                <ValidationMessage For="@(() => clientes.Nombres)" />
            </div>

            <div class="mb-3">
                <label for="SueldoHora" class="form-label">WhatsApp:</label>
                <InputText @bind-Value="clientes.WhatsApp" class="form-control" />
                <ValidationMessage For="@(() => clientes.WhatsApp)" />
            </div>
        </div>

        <div class="card-footer d-flex justify-content-lg-center text-center">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">
                    <span class="bi bi-plus"></span> Nuevo
                </button>
                <button type="submit" class="btn btn-outline-success">
                    <span class="bi bi-check2-square"></span> Guardar
                </button>
                <button type="button" class="btn btn-outline-danger" @onclick="Volver">
                    <span class="bi bi-arrow-90deg-left"></span> Volver
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int ClienteId { get; set; }
    public Clientes? clientes { get; set; } = new Clientes();
    public List<Clientes> listaClientes { get; set; } = new List<Clientes>();

    protected override async Task OnInitializedAsync()
    {
        listaClientes = await clienteService.Listar(tecnico => true);
    }

    public async Task Nuevo()
    {
         clientes = new Clientes();
    }

    public async Task<bool> Validar()
    {
        var existe = await clienteService.Existe(clientes.ClienteId);
        return !existe;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }

        var guardado = await clienteService.Guardar(clientes);
        if (guardado)
        {
            Nuevo();
        }
    }

    public void Volver()
    {
        navigationManager.NavigateTo("/Cliente/Index");
    }
}
